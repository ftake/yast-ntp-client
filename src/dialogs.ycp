/**
 * File:	include/ntp-client/dialogs.ycp
 * Package:	Configuration of ntp-client
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

textdomain "ntp-client";

import "NtpClient";
import "Wizard";
import "CWM";
import "Label";
import "Popup";

include "ntp-client/helps.ycp";
include "ntp-client/misc.ycp";

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{
    Wizard::RestoreHelp(HELPS["read"]:"");
    NtpClient::AbortFunction = ``{ return PollAbort();};
    boolean ret = NtpClient::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    Wizard::RestoreHelp(HELPS["write"]:"");
    NtpClient::AbortFunction = ``{ return PollAbort();};
    boolean ret = NtpClient::Write();
    return ret ? `next : `abort;
}

/**
 * Main dialog
 * @return symbol for wizard sequencer
 */
global define symbol MainDialog () ``{
    list w = CWM::CreateWidgets (["start", "overview"], NtpClient::widgets);
    term contents = `HBox (`HSpacing (1), `VBox (
	`VSpacing (1),
	`HBox (
	    `HStretch (),
	    "start",
	    `HStretch ()
	),
	`VSpacing (1),
	"overview",
	`VSpacing (1)
    ), `HSpacing (1));

    // dialog caption
    string caption = _("NTP Client Configuration");
    string help = CWM::MergeHelps (w);
    contents = CWM::PrepareDialog (contents, w);
    Wizard::SetContentsButtons (caption, contents, help,
	Label::BackButton (), Label::FinishButton ());
    Wizard::ReplaceBackButton(`VSpacing (0));
    Wizard::ReplaceAbortButton (
	`PushButton (`id (`abort), Label::CancelButton ()));

    return CWM::Run (w,
	// yes-no popup
	 $[`abort : ``(! NtpClient::modified || NtpClient::reallyExit ())]);

}

/**
 * Type of new peer selection dialog
 * @return symbol for wizard sequencer
 */
global define symbol TypeSelectDialog () ``{
    term contents = `HBox (`HStretch (), `VBox (
	`VSpacing (3),
	"peer_types",
	`VSpacing (3)
    ), `HStretch ());

    // dialog caption
    string caption = _("Select Type of Entry to Add");

    return CWM::ShowAndRun (["peer_types"],
	NtpClient::widgets,
	contents, caption, Label::BackButton (), Label::NextButton (),
	$[`abort : ``(Popup::ReallyAbort (true))]);
}

/**
 * Server editing dialog
 * @return symbol for wizard sequencer
 */
global define symbol ServerDialog () ``{
    term contents = `HBox (`HSpacing (3), `VBox (
	`VSpacing (3),
	"saddress",
	`VSpacing (1),
	`Left ("init_sync"),
	`VSpacing (1),
	"options",
	`VSpacing (3)
    ), `HSpacing (3));

    // dialog caption
    string caption = _("Configure NTP Server");

    return CWM::ShowAndRun (["saddress", "init_sync", "options"],
	NtpClient::widgets,
	contents, caption, Label::BackButton (), Label::OKButton (),
	$[`abort : ``(Popup::ReallyAbort (true))]);
}

/**
 * Peer editing dialog
 * @return symbol for wizard sequencer
 */
global define symbol PeerDialog () ``{
    term contents = `HBox (`HSpacing (3), `VBox (
	`VSpacing (3),
	"address",
	`VSpacing (1),
	`Left ("init_sync"),
	`VSpacing (1),
	"options",
	`VSpacing (3)
    ), `HSpacing (3));

    // dialog caption
    string caption = _("Configure NTP Peer");

    return CWM::ShowAndRun (["address", "init_sync", "options"],
	NtpClient::widgets,
	contents, caption, Label::BackButton (), Label::OKButton (),
	$[`abort : ``(Popup::ReallyAbort (true))]);
}

/**
 * Reference clock editing dialog
 * @return symbol for wizard sequencer
 */
global define symbol RadioDialog () ``{
    term contents = `HBox (`HSpacing (3), `VBox (
	`VSpacing (3),
	"rcaddress",
	`VSpacing (1),
	"options",
	`VSpacing (1),
	"fudge_options",
	`VSpacing (3)
    ), `HSpacing (3));

    // dialog caption
    string caption = _("Configure Serial Reference Clock");

    return CWM::ShowAndRun (["rcaddress", "options", "fudge_options"],
	NtpClient::widgets,
	contents, caption, Label::BackButton (), Label::OKButton (),
	$[`abort : ``(Popup::ReallyAbort (true))]);
}

/**
 * Broadcast editing dialog
 * @return symbol for wizard sequencer
 */
global define symbol BCastDialog () ``{
    term contents = `HBox (`HSpacing (3), `VBox (
	`VSpacing (3),
	"bcaddress",
	`VSpacing (1),
	"options",
	`VSpacing (3)
    ), `HSpacing (3));

    // dialog caption
    string caption = _("Configure Broadcasting");

    return CWM::ShowAndRun (["bcaddress", "options"], NtpClient::widgets,
	contents, caption, Label::BackButton (), Label::OKButton (),
	$[`abort : ``(Popup::ReallyAbort (true))]);
}
/**
 * Broadcast client editing dialog
 * @return symbol for wizard sequencer
 */
global define symbol BCastClientDialog () ``{
    term contents = `HBox (`HSpacing (3), `VBox (
	`VSpacing (3),
	"address",
	`VSpacing (1),
	"options",
	`VSpacing (3)
    ), `HSpacing (3));

    // dialog caption
    string caption = _("Configure Broadcasting Client");

    return CWM::ShowAndRun (["address", "options"], NtpClient::widgets,
	contents, caption, Label::BackButton (), Label::OKButton (),
	$[`abort : ``(Popup::ReallyAbort (true))]);
}


/**
 * Pseudo-dialog to store settings to main structure
 * @return symbol for wizard sequencer
 */

global define symbol StoreRecord () ``{
    if (NtpClient::selected_item_index == -1)
	NtpClient::peers = add (NtpClient::peers, NtpClient::selected_item);
    else
	NtpClient::peers[NtpClient::selected_item_index]
	    = NtpClient::selected_item;
    NtpClient::modified = true;
    return `next;
}


/* EOF */
}
