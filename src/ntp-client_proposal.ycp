/**
 * File:	clients/ntp-client_proposal.ycp
 * Summary:	Installation client for ntp configuration
 * Author:	Bubli <kmachalkova@suse.cz>
 *
 */

{
textdomain "ntp-client";

import "Address";
import "NetworkService";
import "NtpClient";
import "Service";
import "String";
import "Stage";
import "Package";
import "Packages";
import "PackageSystem";
import "Pkg";
import "Popup";
import "Report";

y2milestone("----------------------------------------");
y2milestone("Ntp client proposal started");
y2milestone("Arguments: %1", WFM::Args());

any ret = nil;
string func = "";
map param = $[];

if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map)WFM::Args(1);
}

void ProposeSomething()
{
    list ntp_items = [];
    if( NtpClient::config_has_been_read || NtpClient::ProcessNtpConf() )
    {
	ntp_items = maplist(string server, NtpClient::GetUsedNtpServers(),{
	   return `item(`id(server), server); 
	});
    }
    if( ntp_items == [])
    {
        string cc = param["country"]:NtpClient::GetCurrentLanguageCode();
	y2milestone("Nothing found in /etc/ntp.conf, proposing current language-based NTP server list");
        ntp_items = NtpClient::GetNtpServersByCountry( cc, true );
	NtpClient::config_has_been_read = true;
    }
    ntp_items = add(ntp_items, "");
    UI::ChangeWidget(`id(`ntp_address), `Items, ntp_items);

}

void AddSingleServer( string server )
{

   integer idx = NtpClient::findSyncRecord("server", server); 

   // -1 means adding new server
   if (idx == -1)
   {
        NtpClient::selected_record["address"] = server;
        NtpClient::selected_record["type"] = "server";
   }
   else
	NtpClient::selectSyncRecord(idx);

   NtpClient::storeSyncRecord();
}

boolean ValidateSingleServer( string ntp_server )
{
    if (!Address::Check(ntp_server) )
    {
        UI::SetFocus(`id(`ntp_address));
	return false;
    }

    return true;
}

if (func == "CreateUI")
{
   term cont =
	`Left ( `VBox(
            `VSpacing (0.5),
            `HBox (
                `HSpacing (3),
                `ComboBox (`id (`ntp_address), `opt (`editable),
                        // combo box label
                        _("NTP Server Address")
                ),
                `VBox (
                    `Label (""),
                    // push button label
                    `PushButton (`id (`ntp_configure), _("Configure..."))
                )
            )
	));

    if (UI::WidgetExists(`id(`rp)))
    {
        UI::ReplaceWidget(`id(`rp), cont);

        if (!NetworkService::isNetworkRunning())
        {
            y2warning("Network is not running, NTP synchronization will not be available");
            UI::ChangeWidget(`id(`ntp_content), `Enabled, false);
        }

	//OK, let's remove this, ntp package is available even on 1CD media so we don't need
        //to check if it is available to prevent repository scanning windows from popping up 
	//(#327336, c#21)

        //if ( ( Stage::initial() || !Package::Installed("ntp") ) && !Package::Available("ntp") )
        //{
        //    y2warning("ntp package is not installable, NTP synchronization will not be available");
        //    UI::ChangeWidget(`id(`ntp_content), `Enabled, false);
        //}
    }

    ret = true;
}

else if (func == "GetUseNTP")
{
    ret = NtpClient::ntp_selected;
}

else if (func == "SetUseNTP")
{
    NtpClient::ntp_selected = param["ntp_used"]:false;
    ret = true;
}

else if (func == "MakeProposal")
{
    ProposeSomething();
    ret = true;
}

else if (func == "Write")
{
    string ntp_server = (string) UI::QueryWidget(`id(`ntp_address), `Value);
    boolean write_settings = param["write_settings"]:false;
    boolean ntpdate_only = param["ntpdate_only"]:false;

    if ( !ValidateSingleServer( ntp_server ) )
	ret = `invalid_hostname;
    else
    {
	string required_package = "ntp";

        //In 1st stage, schedule packages for installation
        //but not in case user wants to set the time only (F#302917)
	//(ntpdate is in inst-sys so we don't need the package)
        if (Stage::initial() && !ntpdate_only)
	{
	    if (Package::Available(required_package))
	    {
	        Packages::addAdditionalPackage(required_package);
	        // bugzilla #327050
	        // Agent for writing /etc/ntp.conf needs to be installed
	        // to write the settings at the end of the installation
	        Packages::addAdditionalPackage("yast2-ntp-client");
	    }
	}
	//Otherwise, prompt user for confirming pkg installation
	else
	{
	   if (!PackageSystem::CheckAndInstallPackages([ required_package ]))
	   {
	        Report::Error(sformat( _("Synchronization with NTP server is not possible
without having package %1 installed"), required_package));
	   }
	}

        integer status = -1;
        string service_name = "ntp";

        //Stop NTP service on running system (during 1st stage, we don't care)
        if( !Stage::initial())
        {
            status = Service::Status (service_name); 
            //Stop service temporarily (otherwise ntpdate won't work)
            //0 means service is running
            if ( status == 0)
	        Service::Stop (service_name);
        }

        Popup::ShowFeedback("", _("Synchronizing with NTP server..."));
        y2milestone("Running ntpdate to sync with %1", ntp_server);

        integer r = (integer) SCR::Execute (.target.bash, sformat ("/usr/sbin/ntpdate '%1'", String::Quote(ntp_server)));
        y2milestone ("'ntpdate %1' returned %2", ntp_server, r);

        if( !Stage::initial())
        {
	    if( status == 0 )
                Service::Start(service_name);
        }

        if (r == 0)
        {
            ret = `success;

	    //User wants more than running ntpdate
	    //(I hate this, it's overly complicated, but some 
	    //things are just not explainable)
	    if (!ntpdate_only)
            {
	        NtpClient::modified = true;
	        AddSingleServer(ntp_server);

	        //OK, so we stored the server address
	        //In inst-sys we don't need to care further
	        //ntp-client_finish will do the job
	        //In installed system we must write the settings

	        if ( !Stage::initial() /*&& write_settings*/)
		    NtpClient::Write();
	    }
        }
        else
	    ret = `ntpdate_failed;

	Popup::ClearFeedback();
    }
}

else if (func == "AskUser")
{
    string ntp_server = (string) UI::QueryWidget(`id(`ntp_address), `Value);
    if ( !ValidateSingleServer( ntp_server ) )
	ret = `invalid_hostname;
    else
    {
        string ntp_server = (string) UI::QueryWidget(`id(`ntp_address), `Value);
        AddSingleServer(ntp_server);
        ret = (symbol) WFM::CallFunction("ntp-client");
        ProposeSomething();
    }
}

y2milestone("Ntp client proposal finished");
y2milestone("----------------------------------------");
return ret;
}


