/**
 * File:	include/ntp-client/widgets.ycp
 * Package:	Configuration of ntp-client
 * Summary:	Widgets definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

textdomain "ntp-client";

import "Popup";
import "Label";
import "NtpClient";

include "ntp-client/helps.ycp";
include "ntp-client/misc.ycp";

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void startInit (any id) ``{
    UI::ChangeWidget (`id ("start"), `CurrentButton,
	start_at_boot ? "boot" : "never");
}

/**
 * Store settings of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 */
global define void startStore (any id, map event) ``{
    start_at_boot = UI::QueryWidget (`id ("start"), `CurrentButton) == "boot";
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void overviewInit (any id) ``{
    integer index = -1;
    map types = $[
	// table cell
	"server" : _("Server"),
	// table cell
	"peer" : _("Peer"),
	// table cell
	"radio" : _("Local radio clock"),
	// table cell
	"broadcast" : _("Broadcast"),
	// table cell
	"broadcastclient" : _("Accepting broadcasts"),
    ];
    list items = maplist (`i, peers, ``{
	index = index + 1;
	if (! haskey (types, i[0]:""))
	    return nil;
	return `item (`id (index), types[i[0]:""]:"", i[1]:"");
    });
    items = filter (`i, items, ``(i != nil));
    UI::ChangeWidget (`id (`overview), `Items, items);
    UI::SetFocus (`id (`overview));
}

/**
 * Handle events on the widget
 * @param id any widget id
 * @param event map event that caused storing process
 * @return any event to pass to WS or nil
 */
global define any overviewHandle (any id, map event) ``{
    map types = $[
	"server" : `server,
	"peer" : `peer,
	"radio" : `radio,
	"broadcast" : `bcast,
	"broadcastclient" : `bcastclient,
   ];
   selected_item_index = UI::QueryWidget (`id (`overview), `CurrentItem);
   if (event["ID"]:nil == `add)
    {
	selected_item_index = -1;
	UI::OpenDialog (`VBox (
	    `RadioButtonGroup (`id (`rbg), `VBox (
		// label
		`Left (`Label (_("Select type of entry to add"))),
		`VSpacing (1),
		// radio button
		`Left (`RadioButton (`id ("server"), _("&Server"), true)),
		// radio button
		`Left (`RadioButton (`id ("peer"), _("&Peer"))),
		// radio button
		`Left (`RadioButton (`id ("radio"), _("&Radio clock"))),
		// radio button
		`Left (`RadioButton (`id ("broadcast"), _("&Broadcasting"))),
		`Left (`RadioButton (`id ("broadcastclient"),
		    // radio button
		    _("&Accepting broadcast packets")))
	    )),
	    `VSpacing (1),
	    `HBox (
		`HStretch (),
		`PushButton (`id (`ok), `opt (`default), Label::OKButton ()),
		`HSpacing (2),
		`PushButton (`id (`cancel), Label::CancelButton ()),
		`HStretch ()
	    )
	));
	UI::SetFocus (`id ("server"));
	any ret = nil;
	while (ret == nil)
	    ret = UI::UserInput ();
	string type = UI::QueryWidget (`id (`rbg), `CurrentButton);
	UI::CloseDialog ();
	if (ret != `ok)
	    return nil;
	selected_item = [type, "", ""];
	return types[type]:nil;
    }
    else if (event["ID"]:nil == `edit)
    {
	selected_item_index = UI::QueryWidget (`id (`overview), `CurrentItem);
	selected_item = peers[selected_item_index]:[];
	string type = selected_item[0]:"";
	return types[type]:nil;
    }
    else if (event["ID"]:nil == `delete)
    {
	// yes-no popup
	if (Popup::YesNo (_("Delete selected item?")))
	{
	    peers[selected_item_index] = nil;
	    peers = filter (`p, peers, ``(p != nil));
	    overviewInit (id);
	    NtpClient::modified = true;
	}
    }

}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void addressInit (any id) ``{
    UI::ChangeWidget (`id (id), `Value, selected_item[1]:"");
    UI::SetFocus (`id (id));
}

/**
 * Store settings of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 */
global define void addressStore (any id, map event) ``{
    selected_item[1] = UI::QueryWidget (`id (id), `Value);
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void initSyncInit (any id) ``{
    UI::ChangeWidget (`id ("init_sync"), `Value, selected_item[3]:false);
}

/**
 * Store settings of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 */
global define void initSyncStore (any id, map event) ``{
    selected_item[3] = UI::QueryWidget (`id ("init_sync"), `Value);
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void optionsInit (any id) ``{
    UI::ChangeWidget (`id ("options"), `Value, selected_item[2]:"");
}

/**
 * Store settings of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 */
global define void optionsStore (any id, map event) ``{
    selected_item[2] = UI::QueryWidget (`id ("options"), `Value);
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void fudgeInit (any id) ``{
    string fudge = "";
    string address = selected_item[1]:"";
    foreach (`p, peers, ``{
	if (p[0]:"" == "fudge" && p[1]:"" == address)
	    fudge = p[2]:"";
    });
    UI::ChangeWidget (`id ("fudge_options"), `Value, fudge);
}

/**
 * Store settings of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 */
global define void fudgeStore (any id, map event) ``{
    // remove old entry first
    string address = selected_item[1]:"";
    peers = maplist (`p, peers, ``{
	if (p[0]:"" == "fudge" && p[1]:"" == address)
	    p = nil;
	return p;
    });
    // and create a new one
    address = UI::QueryWidget (`id ("rcaddress"), `Value);
    peers = add (peers,
	["fudge", address, UI::QueryWidget (`id ("fudge_options"), `Value)]);
}


/**
 * Initialize all widgets
 * @return map of widgets
 */
global define map InitWidgets () ``{
    map address = $[
	    "widget" : `textentry,
	    // text entry label
	    "label" : ("A&ddress"),
	    "init" : ``(NtpClient::addressInit ()),
	    "store" : ``(NtpClient::addressStore ()),
	    "help" : HELPS["address"]:"",
    ];
    return $[
	"start" : $[
	    "widget" : `radio_buttons,
	    // frame
	    "label" : _("Automatically start NTP daemon"),
	    "items" : [
		// radio button
		[ "never", _("N&ever") ],
		// radio button
		[ "boot", _("When &booting system") ],
	    ],
	    "help" : HELPS["start"]:"",
	    "init" : ``(NtpClient::startInit ()),
	    "store" : ``(NtpClient::startStore ()),
	],
	"overview" : $[
	    "widget" : `custom,
	    "custom_widget" : `VBox (
		`Table (`id (`overview), `header (
		    // table header
		    _("Type"),
		    // table header
		    _("Address"))),
		`HBox (
		    `PushButton (`id (`add), Label::AddButton ()),
		    `PushButton (`id (`edit), Label::EditButton ()),
		    `PushButton (`id (`delete), Label::DeleteButton ()),
		    `HStretch ()
		)
	    ),
	    "help" : HELPS["overview"]:"",
	    "init" : ``(NtpClient::overviewInit ()),
	    "handle" : ``(NtpClient::overviewHandle ()),
	],
	"address" : address,
	"saddress" : union (address, $[
	    "help" : HELPS["saddress"]:"",
	]),
	"bcaddress" : union (address, $[
	    "help" : HELPS["bcaddress"]:"",
	]),
	"rcaddress" : union (address, $[
	    "help" : HELPS["rcaddress"]:"",
	]),

	"init_sync" : $[
	    "widget" : `checkbox,
	    // checkbox
	    "label" : _("Use for &initial synchronization"),
	    "init" : ``(NtpClient::initSyncInit ()),
	    "store" : ``(NtpClient::initSyncStore ()),
	    "help" : HELPS["init_sync"]:"",
	],
	"options" : $[
	    "widget" : `textentry,
	    // text entry label
	    "label" : _("O&ptions"),
	    "init" : ``(NtpClient::optionsInit ()),
	    "store" : ``(NtpClient::optionsStore ()),
	    "help" : HELPS["options"]:"",
	],
	"fudge_options" : $[
	    "widget" : `textentry,
	    // text entry label
	    "label" : _("&Fudge factors"),
	    "init" : ``(NtpClient::fudgeInit ()),
	    "store" : ``(NtpClient::fudgeStore ()),
	    "help" : HELPS["fudge_options"]:"",
	],
    ];
}



}
