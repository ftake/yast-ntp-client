/**
 * File:	include/ntp-client/widgets.ycp
 * Package:	Configuration of ntp-client
 * Summary:	Widgets definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

textdomain "ntp-client";

import "Popup";
import "Label";
import "NtpClient";

include "ntp-client/helps.ycp";
include "ntp-client/misc.ycp";

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void startInit (any id) ``{
    UI::ChangeWidget (`id ("start"), `CurrentButton,
	start_at_boot ? "boot" : "never");
}

/**
 * Store settings of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 */
global define void startStore (any id, map event) ``{
    start_at_boot = UI::QueryWidget (`id ("start"), `CurrentButton) == "boot";
}

/**
 * Handle function of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 * @return any always nil
 */
global define any startHandle (any id, map event) ``{
    boolean start = UI::QueryWidget (`id ("start"), `CurrentButton) == "boot";
    // yes-no popup
    if (start && ! Popup::ContinueCancel (_("Warning!

If you do not have permanent internet connection,
starting of XNTP daemon can take very long time, and 
XNTP daemon need not run properly.")))
	UI::ChangeWidget (`id ("start"), `CurrentButton, "never");

    if (start != start_at_boot)
	NtpClient::modified = true;

    return nil;
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void overviewInit (any id) ``{
    integer index = -1;
    map types = $[
	// table cell, NTP relationship type
	"server" : _("Server"),
	// table cell, NTP relationship type
	"peer" : _("Peer"),
	// table cell, NTP relationship type
	"radio" : _("Local Radio Clock"),
	// table cell, NTP relationship type
	"broadcast" : _("Broadcast"),
	// table cell, NTP relationship type
	"broadcastclient" : _("Accepting Broadcasts"),
    ];
    list items = maplist (`i, peers, ``{
	index = index + 1;
	if (! haskey (types, i["key"]:""))
	    return nil;
	if (i["key"]:"" == "radio" && i["value"]:"" == "127.127.1.0")
	{
	    // table cell
	    return `item (`id (index), _("Local CMOS Clock"), i["value"]:"");
	}
	return `item (`id (index), types[i["key"]:""]:"", i["value"]:"");
    });
    items = filter (`i, items, ``(i != nil));
    UI::ChangeWidget (`id (`overview), `Items, items);
    UI::SetFocus (`id (`overview));
}

/**
 * Handle events on the widget
 * @param id any widget id
 * @param event map event that caused storing process
 * @return any event to pass to WS or nil
 */
global define any overviewHandle (any id, map event) ``{
    map types = $[
	"server" : `server,
	"peer" : `peer,
	"radio" : `radio,
	"broadcast" : `bcast,
	"broadcastclient" : `bcastclient,
    ];
    selected_item_index = UI::QueryWidget (`id (`overview), `CurrentItem);
    if (event["ID"]:nil == `add)
    {
	return `add;
    }
    else if (event["ID"]:nil == `edit || event["ID"]:nil == `overview)
    {
	selected_item_index = UI::QueryWidget (`id (`overview), `CurrentItem);
	selected_item = peers[selected_item_index]:$[];
	string type = selected_item["key"]:"";
	return types[type]:nil;
    }
    else if (event["ID"]:nil == `delete)
    {
	// yes-no popup
	if (Popup::YesNo (_("Delete the selected item?")))
	{
	    peers[selected_item_index] = nil;
	    peers = filter (`p, peers, ``(p != nil));
	    overviewInit (id);
	    NtpClient::modified = true;
	}
    }

}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void addressInit (any id) ``{
    UI::ChangeWidget (`id (id), `Value, selected_item["value"]:"");
    UI::SetFocus (`id (id));
}

/**
 * Store settings of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 */
global define void addressStore (any id, map event) ``{
    selected_item["value"] = UI::QueryWidget (`id (id), `Value);
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void initSyncInit (any id) ``{
    UI::ChangeWidget (`id ("init_sync"), `Value, selected_item["initial"]:false);
}

/**
 * Store settings of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 */
global define void initSyncStore (any id, map event) ``{
    selected_item["initial"] = UI::QueryWidget (`id ("init_sync"), `Value);
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void optionsInit (any id) ``{
    UI::ChangeWidget (`id ("options"), `Value, selected_item["param"]:"");
}

/**
 * Store settings of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 */
global define void optionsStore (any id, map event) ``{
    selected_item["param"] = UI::QueryWidget (`id ("options"), `Value);
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void fudgeInit (any id) ``{
    string fudge = "";
    string address = selected_item["value"]:"";
    foreach (`p, peers, ``{
	if (p["key"]:"" == "fudge" && p["value"]:"" == address)
	    fudge = p["param"]:"";
    });
    UI::ChangeWidget (`id ("fudge_options"), `Value, fudge);
}

/**
 * Store settings of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 */
global define void fudgeStore (any id, map event) ``{
    // remove old entry first
    string address = selected_item["value"]:"";
    peers = maplist (`p, peers, ``{
	if (p["key"]:"" == "fudge" && p["value"]:"" == address)
	    p = nil;
	return p;
    });
    // and create a new one
    address = UI::QueryWidget (`id ("rcaddress"), `Value);
    peers = add (peers,
	$["key" : "fudge", "value" : address, "param" : UI::QueryWidget (`id ("fudge_options"), `Value)]);
}

// selected type of peer
global symbol peer_type_selected = nil;

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void peerTypesInit (any id) ``{
    if (peer_type_selected != nil)
	UI::ChangeWidget (`id ("peer_types"), `CurrentButton,
	    peer_type_selected);
    else
	UI::ChangeWidget (`id ("peer_types"), `CurrentButton, `server);
}

/**
 * Handle events on the widget
 * @param id any widget id
 * @param event map event that caused storing process
 * @return any event to pass to WS or nil
 */
global define symbol peerTypesHandle (any id, map event) ``{
    peer_type_selected = UI::QueryWidget (`id ("peer_types"), `CurrentButton);
    if (event["ID"]:nil == `next)
	return peer_type_selected;
}

/**
 * Store settings of the widget
 * @param id any widget id
 * @param event map event that caused storing process
 */
global define void peerTypesStore (any id, map event) ``{
    map types = $[
	`server : "server",
        `peer : "peer",
        `radio : "radio",
        `bcast : "broadcast",
        `bcastclient : "broadcastclient",
    ];
    string type = types[peer_type_selected]:"server";
    selected_item = $["key" : type, "value" : "", "param" : ""];
    selected_item_index = -1;
}


/**
 * Initialize all widgets
 * @return map of widgets
 */
global define map InitWidgets () ``{
    map address = $[
	    "widget" : `textentry,
	    // text entry label
	    "label" : ("A&ddress"),
	    "init" : ``(NtpClient::addressInit ()),
	    "store" : ``(NtpClient::addressStore ()),
	    "help" : HELPS["address"]:"",
    ];
    return $[
	"start" : $[
	    "widget" : `radio_buttons,
	    // frame
	    "label" : _("Automatically Start NTP Daemon"),
	    "items" : [
		// radio button
		[ "never", _("N&ever") ],
		// radio button
		[ "boot", _("When &Booting System") ],
	    ],
	    "help" : HELPS["start"]:"",
	    "init" : ``(NtpClient::startInit ()),
	    "store" : ``(NtpClient::startStore ()),
	    "handle" : ``(NtpClient::startHandle ()),
	    "handle_events" : [ "boot" ],
	    "opt" : [`notify],
	],
	"overview" : $[
	    "widget" : `custom,
	    "custom_widget" : `VBox (
		`Table (`id (`overview), `opt (`notify), `header (
		    // table header
		    _("Source Type"),
		    // table header
		    _("Address"))),
		`HBox (
		    `PushButton (`id (`add), Label::AddButton ()),
		    `PushButton (`id (`edit), Label::EditButton ()),
		    `PushButton (`id (`delete), Label::DeleteButton ()),
		    `HStretch ()
		)
	    ),
	    "help" : HELPS["overview"]:"",
	    "init" : ``(NtpClient::overviewInit ()),
	    "handle" : ``(NtpClient::overviewHandle ()),
	],
	"address" : address,
	"saddress" : union (address, $[
	    "help" : HELPS["saddress"]:"",
	]),
	"bcaddress" : union (address, $[
	    "help" : HELPS["bcaddress"]:"",
	]),
	"rcaddress" : union (address, $[
	    "help" : HELPS["rcaddress"]:"",
	]),

	"init_sync" : $[
	    "widget" : `checkbox,
	    // checkbox
	    "label" : _("Use for &Initial Synchronization"),
	    "init" : ``(NtpClient::initSyncInit ()),
	    "store" : ``(NtpClient::initSyncStore ()),
	    "help" : HELPS["init_sync"]:"",
	],
	"options" : $[
	    "widget" : `textentry,
	    // text entry label
	    "label" : _("O&ptions"),
	    "init" : ``(NtpClient::optionsInit ()),
	    "store" : ``(NtpClient::optionsStore ()),
	    "help" : HELPS["options"]:"",
	],
	"fudge_options" : $[
	    "widget" : `textentry,
	    // text entry label
	    "label" : _("&Fudge Factors"),
	    "init" : ``(NtpClient::fudgeInit ()),
	    "store" : ``(NtpClient::fudgeStore ()),
	    "help" : HELPS["fudge_options"]:"",
	],
	"peer_types" : $[
	    "widget" : `radio_buttons,
	    "items" : [
		// radio button, NTP relationship type
                [`server, _("&Server")],
                // radio button, NTP relationship type
                [`peer, _("&Peer")],
                // radio button, NTP relationship type
                [`radio, _("&Radio Clock")],
                // radio button, NTP relationship type
                [`broadcast, _("&Broadcasting")],
                // radio button, NTP relationship type
                [`broadcastclient, _("&Accepting Broadcast Packets")]
	    ],
	    // frame
	    "label" : _("Entry Type"),
	    "init" : ``(NtpClient::peerTypesInit ()),
	    "handle" : ``(NtpClient::peerTypesHandle ()),
	    "store" : ``(NtpClient::peerTypesStore ()),
	    "help" : HELPS["peer_types"]:"",
	],
    ];
}



}
