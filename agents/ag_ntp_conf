#!/usr/bin/perl -w

use ycp;
use File::Temp;

sub parse ()
{
    y2milestone ("Parsing /etc/ntp.conf");
    my @ret = ();
    my $comment = "";
    open (IN, "/etc/ntp.conf") || return @ret;
    while ( $line = <IN> )
    {
	chomp ( $line );
	my $key = "";
	my $value = "";
	my $param = "";
	chomp ($line);
	if ($line =~ /^.*#.*/)
	{
	    ($line) = $line =~ m/^([^#]*)#.*/;
	}
	($key, $rest) = $line =~  m/([^ \t]+)([$ \t]+.*)/;
	if (defined ($key))
	{
	    $value = "";
	    $param = "";
	    if (defined ($rest))
	    {
		if ($rest =~ /^[ \t]*[^ \t]+.*$/)
		{
		    ( $rest ) = $rest =~ m/^[ \t]*([^ \t]+.*)$/;
		}
		$value = $rest;
		if ($rest =~ /[^ \t]+[ \t]+[^ \t].*/)
		{
		    ($value, $param) = $rest =~ m/([^ \t]+)[ \t]+([^ \t].*)$/;
		}
		elsif ($rest =~ /[^ \t]+[ \t]+/)
		{
		    ($value) = $rest =~ m/([^ \t]+)[ \t]+/;
		}
	    }
	    my %record = ("key" => $key, "value" => $value, "param" => $param);
	    push (@ret, \%record); 
	}
    }
    close (IN);
    y2milestone ("Parsing done");
    return @ret;
}

sub write_file ($)
{
    y2milestone ("Writing /etc/ntp.conf");
    $data = shift;
    @data = @{$data};
    open (OUT, ">/etc/ntp.conf");
    foreach $record ( @data )
    {
	%record = %{$record};
	y2debug ("Saving", $record{"key"}, $record{"value"}, $record{"param"});
	print OUT "$record{\"key\"} $record{\"value\"} $record{\"param\"}\n"
    }
    y2milestone ("Writing file done");
    close (OUT);
}

while ( <STDIN> )
{
    my ($command, $path, $argument) = ycp::ParseCommand ($_);

    if ( ! defined (@data))
    {
	@data = parse ();
    }

    if ($command eq "Write")
    {
	y2debug ("Write path", $path);
	if ($path eq ".")
	{
	    if (ref ($argument) eq "ARRAY")
	    {
		@data = @{$argument};
	    }
	    else
	    {
		write_file (\@data);
	    }
	    ycp::Return ("true");
	}
	elsif (ref ($argument) eq "ARRAY" && $path =~ /\.[^\.]+$/)
	{
	    my $key = "";
	    ( $key ) = $path =~ m/\.([^\.]+)$/;
	    my @argument = @{$argument};
	    my $replaced = 0;
	    my @tmp_data = @data;
	    @data = ();
	    if ($key eq "fudge")
	    {
		foreach $record ( @tmp_data )
		{
		    my %record = %{$record};
		    if ($record{"key"} ne "fudge")
		    {
			push (@data, $record);
		    }
		    if ($record{"key"} eq "server")
		    {
			foreach $arg (@argument)
			{
			    ( $value, $param ) = @{$arg};
			    if ($value eq $record{"value"})
			    {
				my %new_rec = ( "key" => "fudge", "value" => $value, "param" => $param);
				push (@data, \%new_rec);
			    }
			}
		    }
		}
	    }
	    else
	    {
		foreach $record ( @tmp_data )
		{
		    my %record = %{$record};
		    if ($key eq $record{"key"})
		    {
			if ($replaced == 0)
			{
			    foreach $arg ( @argument )
			    {
				( $value, $param ) = @{$arg};
				y2debug ("Key", $key, "Val", $value, "Param", $param);
				my %new_rec = ( "key" => $key, "value" => $value, "param" => $param);
				push (@data, \%new_rec);
			    }
			    $replaced = 1;
			}
		    }
		    else
		    {
			push (@data, $record);
		    }
		}
		if ($replaced == 0)
		{
		    foreach $arg ( @argument )
		    {
			( $value, $param ) = @{$arg};
			y2debug ("Key", $key, "Value", $value);
			my %new_rec = ( "key" => $key, "value" => $value, "param" => $param);
			push (@data, \%new_rec);
		    }
		}
	    }
	    ycp::Return ("true");
	}
	else
	{
	    y2error ("Wrong arguments");
	    ycp::Return ("false");
	}
    }
    elsif ($command eq "Read")
    {
	y2debug ("Read path", $path);
	if ($path =~ /\.[^\.]+$/)
	{
	    my $key = "";
	    ( $key ) = $path =~ m/\.([^\.]+)$/;
	    if ( $key eq "_reread")
	    {
		@data = parse ();
		next;
	    }
	    my @ret = ();
	    foreach $record ( @data )
	    {
		%record = %{$record};
		if ($record{"key"} eq $key)
		{
		    my @record = ($record{"value"}, $record{"param"});
		    push (@ret, \@record);
		}
	    }
	    ycp::Return (\@ret);
	}
	elsif ($path eq ".")
	{
	    ycp::Return (\@data);
	}
	else
	{
	    y2error ("Wrong arguments");
	    ycp::Return ("false");
	}
    }
    elsif ($command eq "result")
    {
	exit 0;
    }
    else
    {
        y2error ("Wrong path or arguments");
        ycp::Return ("false");
    }
}
